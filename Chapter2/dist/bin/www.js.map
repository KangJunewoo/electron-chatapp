{"version":3,"sources":["../../bin/www"],"names":["app","require","debug","http","port","normalizePort","process","env","PORT","set","server","createServer","io","attach","listen","on","onError","onListening","val","parseInt","isNaN","error","syscall","bind","code","console","exit","addr","address"],"mappings":";;AAEA;;;;AAIA,IAAIA,MAAMC,QAAQ,QAAR,CAAV;AACA,IAAIC,QAAQD,QAAQ,OAAR,EAAiB,iBAAjB,CAAZ;AACA,IAAIE,OAAOF,QAAQ,MAAR,CAAX;;AAEA;;;;AAIA,IAAIG,OAAOC,cAAcC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,MAAlC,CAAX;AACAR,IAAIS,GAAJ,CAAQ,MAAR,EAAgBL,IAAhB;;AAEA;;;;AAIA,IAAIM,SAASP,KAAKQ,YAAL,CAAkBX,GAAlB,CAAb;;AAEAA,IAAIY,EAAJ,CAAOC,MAAP,CAAcH,MAAd;AACAV,IAAIY,EAAJ,CAAOH,GAAP,CAAW,YAAX,EAAwB,CAAC,WAAD,CAAxB;;AAEA;;;;AAIAC,OAAOI,MAAP,CAAcV,IAAd;AACAM,OAAOK,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACAN,OAAOK,EAAP,CAAU,WAAV,EAAuBE,WAAvB;;AAEA;;;;AAIA,SAASZ,aAAT,CAAuBa,GAAvB,EAA4B;AAC1B,MAAId,OAAOe,SAASD,GAAT,EAAc,EAAd,CAAX;;AAEA,MAAIE,MAAMhB,IAAN,CAAJ,EAAiB;AACf;AACA,WAAOc,GAAP;AACD;;AAED,MAAId,QAAQ,CAAZ,EAAe;AACb;AACA,WAAOA,IAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAED;;;;AAIA,SAASY,OAAT,CAAiBK,KAAjB,EAAwB;AACtB,MAAIA,MAAMC,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAMD,KAAN;AACD;;AAED,MAAIE,OAAO,OAAOnB,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,IAFd;;AAIA;AACA,UAAQiB,MAAMG,IAAd;AACE,SAAK,QAAL;AACEC,cAAQJ,KAAR,CAAcE,OAAO,+BAArB;AACAjB,cAAQoB,IAAR,CAAa,CAAb;AACA;AACF,SAAK,YAAL;AACED,cAAQJ,KAAR,CAAcE,OAAO,oBAArB;AACAjB,cAAQoB,IAAR,CAAa,CAAb;AACA;AACF;AACE,YAAML,KAAN;AAVJ;AAYD;;AAED;;;;AAIA,SAASJ,WAAT,GAAuB;AACrB,MAAIU,OAAOjB,OAAOkB,OAAP,EAAX;AACA,MAAIL,OAAO,OAAOI,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,KAAKvB,IAFnB;AAGAF,QAAM,kBAAkBqB,IAAxB;AACD","file":"www.js","sourcesContent":["\n\n/**\n * Module dependencies.\n */\n\nvar app = require('../app');\nvar debug = require('debug')('chapter2:server');\nvar http = require('http');\n\n/**\n * Get port from environment and store in Express.\n */\n\nvar port = normalizePort(process.env.PORT || '3002');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nvar server = http.createServer(app);\n\napp.io.attach(server);\napp.io.set('transports',['websocket']);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  var port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  var bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  var addr = server.address();\n  var bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n}\n"]}